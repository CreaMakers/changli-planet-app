name: Release Build

on:
  push:
    tags:
      - "*"

jobs:
  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradlew executable
        run: chmod +x gradlew

      - name: Decode Keystore
        run: |
          echo ${{ secrets.RELEASE_KEYSTORE }} | base64 --decode > app/release-key.jks

      - name: Build Release APK
        run: ./gradlew assembleRelease
        env:
          RELEASE_STORE_FILE: release-key.jks
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: List generated APK
        run: ls -la app/build/outputs/apk/release/

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/clPlanetApp_release_v*.apk

  call-upload-to-obs:
    name: Upload to OBS
    needs: build-release
    if: success()
    uses: ./.github/workflows/upload-to-obs.yml
    with:
      build_type: "release"
      apk_pattern: "clPlanetApp_release_v*.apk"
      version_tag: ${{ github.ref_name }}
      run_id: ${{ github.run_id }}
    secrets:
      HUAWEICLOUD_SDK_AK: ${{ secrets.HUAWEICLOUD_SDK_AK }}
      HUAWEICLOUD_SDK_SK: ${{ secrets.HUAWEICLOUD_SDK_SK }}

  call-update-download-links:
    name: Update Download Links
    needs: [build-release, call-upload-to-obs]
    if: success() && needs.call-upload-to-obs.outputs.obs_url
    uses: ./.github/workflows/update-download-links.yml
    with:
      obs_url: ${{ needs.call-upload-to-obs.outputs.obs_url }}
    secrets:
      WEBSITE_API_KEY: ${{ secrets.WEBSITE_API_KEY }}

  call-send-notification:
    name: Send Notification
    needs: [build-release, call-upload-to-obs, call-update-download-links]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      build_status: ${{ needs.build-release.result }}
      obs_url: ${{ needs.call-upload-to-obs.outputs.obs_url }}
    secrets:
      WEBHOOK_API_KEY: ${{ secrets.WEBHOOK_API_KEY }}
      WEBHOOK_ADDRESS: ${{ secrets.WEBHOOK_ADDRESS }}
